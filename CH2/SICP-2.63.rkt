#lang racket

;;exercise 2.63
(provide make-tree entry left-tree right-tree tree->list1)
;;make-tree entry left-tree right-tree
(define (make-tree entry left-tree right-tree)
  (list entry left-tree right-tree))
(define (entry tree)
  (car tree))
(define (left-tree tree)
  (cadr tree))
(define (right-tree tree)
  (caddr tree))

(define (tree->list1 tree)
  (if (null? tree)
      '()
      (append (tree->list1 (left-tree tree))
              (cons (entry tree)
                    (tree->list1 (right-tree tree))))))

(define (tree->list2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
      result-list
      (copy-to-list (left-tree tree)
                    (cons (entry tree)
                          (copy-to-list (right-tree tree) result-list)))))
  (copy-to-list tree '()))

;test
(define test-tree (make-tree 1 '() 
                             (make-tree 2 '()
                                        (make-tree 3 '()
                                                   (make-tree 4 '()
                                                              (make-tree 5 '()
                                                                         (make-tree 6 '()
                                                                                    (make-tree 7 '() '()))))))))
(define test-tree1 (make-tree 7 (make-tree 3 (make-tree 1 '() '())
                                          (make-tree 5 '() '()))
                             (make-tree 9 '() (make-tree 11 '() '()))))
(define test-tree2 (make-tree 3 (make-tree 1 '() '())
                              (make-tree 7 (make-tree 5 '() '())
                                         (make-tree 9 '() (make-tree 11 '() '())))))
(define test-tree3 (make-tree 5 (make-tree 3 (make-tree 1 '() '()) '())
                              (make-tree 9 (make-tree 7 '() '())
                                         (make-tree 11 '() '()))))
;(tree->list1 (make-tree 1 (make-tree 2 null null) (make-tree 3 null null)))
;(tree->list2 (make-tree 1 (make-tree 2 null null) (make-tree 3 null null)))
;(tree->list1 test-tree)
;(tree->list2 test-tree)
;(tree->list1 test-tree1)
;(tree->list2 test-tree1)
;(tree->list1 test-tree2)
;(tree->list2 test-tree2)
;(tree->list1 test-tree3)
;(tree->list2 test-tree3)