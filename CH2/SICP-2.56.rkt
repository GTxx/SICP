#lang racket

;;exercise 2.56
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (multiplicand exp)
                                 (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (let ((exp-expo (exponent exp))
               (exp-base (base exp)))
           (make-product (make-product exp-expo (make-exponentiation exp-base (- exp-expo 1)))
                         (deriv exp-base var))))
        (else (error "unknown expression"))))

(define (variable? x) (symbol? x))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (sum? exp) (and (pair? exp) (eq? (car exp) '+)))
(define (number=? x y) (and (number? x) (= x y)))
(define (make-sum x y) 
  (cond ((and (number? x) (number? y)) (+ x y))
        ((number=? x 0) y)
        ((number=? y 0) x)
        (else (list '+ x y))))

(define (addend exp) (cadr exp))
(define (augend exp) (caddr exp))
(define (product? exp) (and (pair? exp) (eq? (car exp) '*)))
(define (make-product x y) 
  (cond ((and (number? x) (number? y)) (* x y))
        ((or (number=? x 0) (number=? y 0)) 0)
        ((number=? x 1) y)
        ((number=? y 1) x)
        (else (list '* x y))))

(define (multiplier exp) (cadr exp))
(define (multiplicand exp) (caddr exp))

; exp
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) '**)))
(define (base exp) (cadr exp))
(define (exponent exp) (caddr exp))
(define (make-exponentiation base exp) 
  (cond ((number=? exp 0) 1)
        ((number=? exp 1) base)
        (else (list '** base exp))))

;;test
(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(** x 3) 'x)
(deriv '(** (+ x y) 3) 'x)
(deriv '(** (+ x y) 1) 'x)
(deriv '(** (+ x y) 0) 'x)